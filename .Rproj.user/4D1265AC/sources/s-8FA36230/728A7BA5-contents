#Takes simulated genotypes and writes to a STRUCTURE input file format.
# - sim_data: output from simulate_admixture
# - structure_snp_order: the desired order of SNPs for columns of
#   output file.
# - sample_names (optional): vector of names for the simulated samples.
# - output: name for the output file.
# - type: options for txt or csv file outputs.

write_to_structure <- function(
  sim_data,
  structure_snp_order,
  sample_names = NULL,
  output = "test",
  type = c("txt","csv")
){
  
  #Create object to convert to numeric (1:4) from ATCG
  structure_code <- c("A","C","T","G")
  
  #convert simulated data to long data-frame format:
  sim_data_long <- melt(sim_data,varnames = c("chromosome","snp_id"),level = "subject")
  
  #Convert data to numeric: 
  sim_data_long <- 
    sim_data_long %>% mutate(
      value = factor(as.character(value),levels = structure_code)) %>%
    mutate(num_value = as.numeric(value))
  
  #Ensure order of SNPs are correct:
  sim_data_long$snp_id <- factor(as.character(sim_data_long$snp_id),levels = structure_snp_order)
  
  #Convert to matrix form:
  allele_data <- sim_data_long %>% dcast(Lsubject ~ snp_id + chromosome,value.var = "num_value")
  
  colnames(allele_data) <- NULL
  allele_data <- as.matrix(allele_data[,-1])
  if(is.null(sample_names)){
    allele_data <- cbind(paste0("SIM",1:nrow(allele_data)),1,1,allele_data)
  }else{
    allele_data <- cbind(sample_names,1,1,allele_data)
  }
  
  #Convert matrix to txt file:
  if("txt" %in% type){
    sink(file = paste0(output,".txt"))
    head <- paste0(structure_snp_order,collapse = "\t\t")
    cat(head)
    for(i in 1:nrow(allele_data)){
      cat("\n")
      for(j in 1:ncol(allele_data)){
        cat(allele_data[i,j])
        cat("\t")
      }
    }
    sink(file = NULL)
  }
  
  #Convert matrix to csv file:
  if("csv" %in% type){
    colnames(allele_data) <- c(
      "SAMPLE",
      "POP",
      "POPFLAG",
      {p <- rep("",2*length(structure_snp_order))
      for(i in 1:length(structure_snp_order)){
        p[2*i - 1] <- structure_snp_order[i]
      }
      p}
    )
    
    write.table(allele_data,file = paste0(output,".csv"),sep = ",",row.names = FALSE)
  }
}